
-- 집합연산자

/*
UNION 
UNION ALL
INTERSECT
MINUS

칼럼 개수가 일치해야 집합연산자 사용이 가능

*/

SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
UNION
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; --중복 미포함

-------------------------------------------

SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
UNION ALL
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; --중복 포함

---------------

SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
INTERSECT
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; -- 교집합

----------------

SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
MINUS
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; --차집합

-----------------

--가상데이터로 합치기
SELECT 200 AS 번호, 'HONG' AS NAME, '서울시' AS CONT FROM DUAL
UNION ALL
SELECT 200, 'HONG', '경기도' FROM DUAL
UNION ALL
SELECT EMPLOYEE_ID, LAST_NAME, '서울시' FROM EMPLOYEES;

-------------------

--분석 함수
SELECT FIRST_NAME,
        SALARY,
        RANK() OVER(ORDER BY SALARY DESC) AS 중복순서계산,
        DENSE_RANK() OVER(ORDER BY SALARY DESC) AS 중복없는함수,
        ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS 번호,
        ROWNUM AS 조회된숫자 --ROWNUM은 ORDER 시키면 결과가 바뀜
FROM EMPLOYEES;

SELECT ROWNUM,
        FIRST_NAME,
        SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC;








